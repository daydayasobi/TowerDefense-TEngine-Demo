
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace GameConfig
{
public partial class Tables
{
    #region The Tables

    private TbAssetsPathData m_TbAssetsPathData;
    public TbAssetsPathData TbAssetsPathData 
    {
        get
        {
            if (m_TbAssetsPathData == null)
            {
                m_TbAssetsPathData = new TbAssetsPathData(defaultLoader("tbassetspathdata"));
                m_TbAssetsPathData.ResolveRef(this);
            }
            return m_TbAssetsPathData;
        }
        set
        {
            m_TbAssetsPathData = value;
            m_TbAssetsPathData.ResolveRef(this);
        }
    }
    private TbEnemyData m_TbEnemyData;
    public TbEnemyData TbEnemyData 
    {
        get
        {
            if (m_TbEnemyData == null)
            {
                m_TbEnemyData = new TbEnemyData(defaultLoader("tbenemydata"));
                m_TbEnemyData.ResolveRef(this);
            }
            return m_TbEnemyData;
        }
        set
        {
            m_TbEnemyData = value;
            m_TbEnemyData.ResolveRef(this);
        }
    }
    private TbLevelData m_TbLevelData;
    public TbLevelData TbLevelData 
    {
        get
        {
            if (m_TbLevelData == null)
            {
                m_TbLevelData = new TbLevelData(defaultLoader("tbleveldata"));
                m_TbLevelData.ResolveRef(this);
            }
            return m_TbLevelData;
        }
        set
        {
            m_TbLevelData = value;
            m_TbLevelData.ResolveRef(this);
        }
    }
    private TbProjectileData m_TbProjectileData;
    public TbProjectileData TbProjectileData 
    {
        get
        {
            if (m_TbProjectileData == null)
            {
                m_TbProjectileData = new TbProjectileData(defaultLoader("tbprojectiledata"));
                m_TbProjectileData.ResolveRef(this);
            }
            return m_TbProjectileData;
        }
        set
        {
            m_TbProjectileData = value;
            m_TbProjectileData.ResolveRef(this);
        }
    }
    private TbSceneConfig m_TbSceneConfig;
    public TbSceneConfig TbSceneConfig 
    {
        get
        {
            if (m_TbSceneConfig == null)
            {
                m_TbSceneConfig = new TbSceneConfig(defaultLoader("tbsceneconfig"));
                m_TbSceneConfig.ResolveRef(this);
            }
            return m_TbSceneConfig;
        }
        set
        {
            m_TbSceneConfig = value;
            m_TbSceneConfig.ResolveRef(this);
        }
    }
    private TbSceneData m_TbSceneData;
    public TbSceneData TbSceneData 
    {
        get
        {
            if (m_TbSceneData == null)
            {
                m_TbSceneData = new TbSceneData(defaultLoader("tbscenedata"));
                m_TbSceneData.ResolveRef(this);
            }
            return m_TbSceneData;
        }
        set
        {
            m_TbSceneData = value;
            m_TbSceneData.ResolveRef(this);
        }
    }
    private TbTowerData m_TbTowerData;
    public TbTowerData TbTowerData 
    {
        get
        {
            if (m_TbTowerData == null)
            {
                m_TbTowerData = new TbTowerData(defaultLoader("tbtowerdata"));
                m_TbTowerData.ResolveRef(this);
            }
            return m_TbTowerData;
        }
        set
        {
            m_TbTowerData = value;
            m_TbTowerData.ResolveRef(this);
        }
    }
    private TbTowerLevelData m_TbTowerLevelData;
    public TbTowerLevelData TbTowerLevelData 
    {
        get
        {
            if (m_TbTowerLevelData == null)
            {
                m_TbTowerLevelData = new TbTowerLevelData(defaultLoader("tbtowerleveldata"));
                m_TbTowerLevelData.ResolveRef(this);
            }
            return m_TbTowerLevelData;
        }
        set
        {
            m_TbTowerLevelData = value;
            m_TbTowerLevelData.ResolveRef(this);
        }
    }
    private TbWaveData m_TbWaveData;
    public TbWaveData TbWaveData 
    {
        get
        {
            if (m_TbWaveData == null)
            {
                m_TbWaveData = new TbWaveData(defaultLoader("tbwavedata"));
                m_TbWaveData.ResolveRef(this);
            }
            return m_TbWaveData;
        }
        set
        {
            m_TbWaveData = value;
            m_TbWaveData.ResolveRef(this);
        }
    }
    private TbWaveElementData m_TbWaveElementData;
    public TbWaveElementData TbWaveElementData 
    {
        get
        {
            if (m_TbWaveElementData == null)
            {
                m_TbWaveElementData = new TbWaveElementData(defaultLoader("tbwaveelementdata"));
                m_TbWaveElementData.ResolveRef(this);
            }
            return m_TbWaveElementData;
        }
        set
        {
            m_TbWaveElementData = value;
            m_TbWaveElementData.ResolveRef(this);
        }
    }

    #endregion

    System.Func<string, ByteBuf> defaultLoader;

    public Tables(System.Func<string, ByteBuf> loader)
    {
        SetDefaultLoader(loader);
        Init();
    }
    
    public void SetDefaultLoader(System.Func<string, ByteBuf> loader)
    {
        defaultLoader = null;
        defaultLoader = loader;
    }

    //public partial void Init();

    public void Init(){}
}

}
